<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
<!-- groupId : un identifiant unique du groupe de projets (souvent basé sur le nom de domaine).-->
    <groupId>com.visualpathit</groupId>
    <!-- artifactId : identifie ce projet particulier.-->
    <artifactId>vprofile</artifactId>
    <!--packaging : indique que le résultat de la construction est un fichier .war, c’est-à-dire une application Web prête pour un serveur (comme Tomcat).-->
    <packaging>war</packaging>
    <!---version : version du projet (v2 ici)-->
    <version>v2</version>
    <name>Visualpathit VProfile Webapp</name>
    <url>http://maven.apache.org</url>


<!--Les propriétés définissent les versions de différentes bibliothèques utilisées. 
Cela rend les versions faciles à mettre à jour en les modifiant seulement ici au lieu de chaque dépendance dans le fichier. 
Par exemple, la version de Spring est définie par ${spring.version}.-->
    <properties>
        <spring.version>6.0.11</spring.version>
        <spring-boot.version>3.1.3</spring-boot.version>
        <spring-security.version>6.1.2</spring-security.version>
        <spring-data-jpa.version>3.1.2</spring-data-jpa.version>
        <hibernate.version>7.0.0.Alpha3</hibernate.version>
        <hibernate-validator.version>6.2.0.Final</hibernate-validator.version>
        <mysql-connector.version>8.0.33</mysql-connector.version>
        <commons-dbcp.version>2.12.0</commons-dbcp.version>

        <junit.version>4.13.2</junit.version>
        <logback.version>1.5.6</logback.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>


<!-- Les dépendances indiquent toutes les bibliothèques que Maven doit télécharger et inclure dans le projet pour le faire fonctionner correctement. 
Voici un aperçu des principales dépendances dans ce fichier :

-Spring Web et Spring MVC : permettent de créer des applications Web et REST avec le framework Spring.
-Spring Security : pour la gestion de la sécurité et des authentifications.
-Hibernate et Spring Data JPA : permettent l’accès et la gestion de la base de données.
-MySQL Connector : pour se connecter à une base de données MySQL.
-Logback : pour la gestion des logs.
-JUnit et Mockito : pour les tests unitaires.
-RabbitMQ et Elasticsearch : pour la gestion de la messagerie et du moteur de recherche.
-->

    <dependencies>
        <!-- Spring Framework -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring-data-jpa.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
<dependency>
    <groupId>org.elasticsearch.client</groupId>
    <artifactId>elasticsearch-rest-high-level-client</artifactId>
    <version>7.10.2</version>
</dependency>
<dependency>
    <groupId>org.elasticsearch</groupId>
    <artifactId>elasticsearch</artifactId>
    <version>7.10.2</version>
</dependency>
        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
            <version>3.1.6</version>
        </dependency>
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>5.21.0</version>
        </dependency>
        <dependency>
            <groupId>net.spy</groupId>
            <artifactId>spymemcached</artifactId>
            <version>2.12.3</version>
        </dependency>

        <!-- MySQL Connector -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql-connector.version}</version>
        </dependency>

        <!-- Jakarta EE -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>10.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Testing Dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.5.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>5.5.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

        <!-- Log4j Dependencies -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.23.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.20.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.20.0</version>
        </dependency>
        <!-- Apache Commons FileUpload -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.11.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch.plugin</groupId>
            <artifactId>aggs-matrix-stats-client</artifactId>
            <version>7.10.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.0</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-messaging</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>2.0.0</version>
        </dependency>


        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>2.0.0</version>
        </dependency>

    </dependencies>


<!--
Les plugins automatisent certaines parties du processus de construction, comme le déploiement, les tests et les rapports de couverture de code
-->
    <build>
        <plugins>
            <!-- Jetty Plugin : Ce plugin peut lancer un serveur Jetty, un serveur Web léger, pour tester et déboguer l'application localement sans avoir besoin de la déployer sur un autre serveur -->
            <plugin>
            <!--groupId, artifactId, et version : définissent les informations du plugin. Ces balises indiquent à Maven de télécharger la version spécifiée du plugin Jetty depuis son repository.-->
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>11.0.15</version>
                <!--<configuration> : contient les paramètres spécifiques pour configurer le comportement du plugin Jetty-->
                <configuration>
                    <webApp>
                    <!--context : spécifie le chemin de contexte de l'app Web sur le serveur Jetty. Ici, il est défini sur /, ce qui signifie que l'app sera accessible directement depuis la racine du serveur (localhost:8080/ par défaut-->
                        <contextPath>/</contextPath>
                    </webApp>
                </configuration>
            </plugin>

            <!-- Maven War Plugin : utilisé pour empaqueter l'appli dans un fichier .war (Web Application Archive), un format de fichier destiné à être déployé sur un serveur d'appli Java, comme Tomcat ou Jett -->
            <plugin>
            <!--Bien que ce plugin n'ait pas de config particulière ici, il est chargé par défaut de construire l’archive .war lors de la phase package. Cela inclut tous les fichiers et config de l'app Web nécessaires (code source, fichiers de config, bibliothèques dépendantes) dans une structure spécifique prête pour le déploiemen-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
            </plugin>


            <!-- JaCoCo Plugin : permettant de mesurer la couverture de code (quelles parties du code sont couvertes par des tests unitaires) et de générer un rapport -->
<!--            <plugin>-->
<!--                <groupId>org.jacoco</groupId>-->
<!--                <artifactId>jacoco-maven-plugin</artifactId>-->
<!--                <version>0.8.10</version>-->

<!-- chaque balise <execution> décrit un ensemble de tâches pour Jacoco à effectuer lors d'une phase spécifique. -->

<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>jacoco-initialize</id>-->
<!--                        <phase>process-resources</phase>-->
<!-- goals : indique les objectifs à accomplir par Jacoco dans chaque phase-->
<!--                        <goals>-->
<!--                            <goal>prepare-agent</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                    <execution>-->
<!--                        <id>jacoco-site</id>-->
<!--                        <phase>post-integration-test</phase>-->
<!--                        <goals>-->
<!--                            <goal>report</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>
